\begin{abstract}
 We introduce \model, a collection of foundation language models ranging from 7B to 65B parameters.
We train our models on trillions of tokens, and show that it is possible to train state-of-the-art models using publicly available datasets exclusively, without resorting to proprietary and inaccessible datasets.
In particular, \model-13B outperforms GPT-3 (175B) on most benchmarks, and \model-65B is competitive with the best models, Chinchilla-70B and PaLM-540B.
We release all our models to the research community\footnote{\notsotiny\url{https://github.com/facebookresearch/llama}}.

\end{abstract}

\section{Introduction}

 Large Languages Models (LLMs) trained on massive corpora of texts have shown their ability to perform new tasks from textual instructions or from a few examples~[CITATION].
These few-shot properties first appeared when scaling models to a sufficient size~[CITATION], resulting in a line of work that focuses on further scaling these models~[CITATION].
These efforts are based on the assumption that more parameters will lead to better performance. 
However, recent work from~[CITATION] shows that, for a given compute budget, the best performances are not achieved by the largest models, but by smaller models trained on more data.

 The objective of the scaling laws from [CITATION] is to determine how to best scale the dataset and model sizes for a particular \emph{training} compute budget.
However, this objective disregards the \emph{inference} budget, which becomes critical when serving a language model at scale.
In this context, given a target level of performance, the preferred model is not the fastest to train but the fastest at inference, and although it may be cheaper to train a large model to reach a certain level of performance, a smaller one trained longer will ultimately be cheaper at inference.
For instance, although [CITATION] recommends training a 10B model on 200B tokens, we find that the performance of a 7B model continues to improve even after 1T tokens.

 The focus of this work is to train a series of language models that achieve the best possible performance at various inference budgets, by training on more tokens than what is typically used.
The resulting models, called \emph{\model}, ranges from 7B to 65B parameters with competitive performance compared to the best existing LLMs.
For instance, \model-13B outperforms GPT-3 on most benchmarks, despite being 10\times smaller.
We believe that this model will help democratize the access and study of LLMs, since it can be run on a single GPU.
At the higher-end of the scale, our 65B-parameter model is also competitive with the best large language models such as Chinchilla or PaLM-540B.

 Unlike Chinchilla, PaLM, or GPT-3, we only use publicly available data, making our work compatible with open-sourcing, while most existing models rely on data which is either not publicly available or undocumented (e.g. ``Books -- 2TB'' or ``Social media conversations'').
There exist some exceptions, notably OPT~[CITATION], GPT-NeoX~[CITATION], BLOOM~[CITATION] and GLM~[CITATION], but none that are competitive with PaLM-62B or Chinchilla.

In the rest of this paper, we present an overview of the modifications we made to the transformer architecture~[CITATION], as well as our training method. 
We then report the performance of our models and compare with others LLMs on a set of standard benchmarks.
Finally, we expose some of the biases and toxicity encoded in our models, using some of the most recent benchmarks from the responsible AI community.

\section{Approach}
Our training approach is similar to the methods described in previous work~[CITATION], and is inspired by the Chinchilla scaling laws~[CITATION].
We train large transformers on a large quantity of textual data using a standard optimizer.

\subsection{Pre-training Data}
Our training dataset is a mixture of several sources, reported in Table~\ref{tab:dataset}, that cover a diverse set of domains.
For the most part, we reuse data sources that have been leveraged to train other LLMs, with the restriction of only using data that is publicly available, and compatible with open sourcing.
This leads to the following mixture of data and the percentage they represent in the training set:

\paragraph{English CommonCrawl [67\%].} 
We preprocess five CommonCrawl dumps, ranging from 2017 to 2020, with the CCNet pipeline~[CITATION].
This process deduplicates the data at the line level, performs language identification with a fastText linear classifier to remove non-English pages and filters low quality content with an n-gram language model.
In addition, we trained a linear model to classify pages used as references in Wikipedia \emph{v.s.} randomly sampled pages, and discarded pages not classified as references.

\paragraph{C4 [15\%].}
During exploratory experiments, we observed that using diverse pre-processed CommonCrawl datasets improves performance.
We thus included the publicly available C4 dataset~[CITATION] in our data.
The preprocessing of C4 also contains deduplication and language identification steps: the main difference with CCNet is the quality filtering, which mostly relies on heuristics such as presence of punctuation marks or the number of words and sentences in a webpage.

\paragraph{Github [4.5\%].}
We use the public GitHub dataset available on Google BigQuery.
We only kept projects that are distributed under the Apache, BSD and MIT licenses.
Additionally, we filtered low quality files with heuristics based on the line length or proportion of alphanumeric characters, and removed boilerplate, such as headers, with regular expressions.
Finally, we deduplicate the resulting dataset at the file level, with exact matches.

\paragraph{Wikipedia [4.5\%].}
We add Wikipedia dumps from the June-August 2022 period, covering 20 languages, which use either the Latin or Cyrillic scripts: \texttt{bg}, \texttt{ca}, \texttt{cs}, \texttt{da}, \texttt{de}, \texttt{en}, \texttt{es}, \texttt{fr}, \texttt{hr}, \texttt{hu}, \texttt{it}, \texttt{nl}, \texttt{pl}, \texttt{pt}, \texttt{ro}, \texttt{ru}, \texttt{sl}, \texttt{sr}, \texttt{sv}, \texttt{uk}.
We process the data to remove hyperlinks, comments and other formatting boilerplate.

[TABLE] \textbf{Pre-training data.


\paragraph{Gutenberg and Books3 [4.5\%].}
We include two book corpora in our training dataset: the Gutenberg Project, which contains books that are in the public domain, and the Books3 section of ThePile~[CITATION], a publicly available dataset for training large language models.
We perform deduplication at the book level, removing books with more than 90\% content overlap.

\paragraph{ArXiv [2.5\%].}
We process arXiv Latex files to add scientific data to our dataset. Following [CITATION], we removed everything before the first section, as well as the bibliography. We also removed the comments from the .tex files, and inline-expanded definitions and macros written by users to increase consistency across papers.

\paragraph{Stack Exchange [2\%].}
We include a dump of Stack Exchange, a website of high quality questions and answers that covers a diverse set of domains, ranging from computer science to chemistry.
We kept the data from the 28 largest websites, removed the HTML tags from text and sorted the answers by score (from highest to lowest).

\begin{table*}[t!]
\center
\begin{tabular}{ccccccc}
\toprule
 params & dimension & n heads & n layers & learning rate & batch size & n tokens \\
\midrule
 6.7B & 4096 & 32 & 32 & 3.0e^{-4} & 4M & 1.0T \\
 13.0B & 5120 & 40 & 40 & 3.0e^{-4} & 4M & 1.0T \\
 32.5B & 6656 & 52 & 60 & 1.5e^{-4} & 4M & 1.4T \\
 65.2B & 8192 & 64 & 80 & 1.5e^{-4} & 4M & 1.4T \\
\bottomrule
\end{tabular}
\caption{
\textbf{Model sizes, architectures, and optimization hyper-parameters.}
\label{tab:architecture}
}
\end{table*}

\paragraph{Tokenizer.}
We tokenize the data with the byte-pair encoding (BPE) algorithm~[CITATION], using the implementation from SentencePiece~[CITATION].
Notably, we split all numbers into individual digits, and fallback to bytes to decompose unknown UTF-8 characters.

Overall, our entire training dataset contains roughly 1.4T tokens after tokenization.
For most of our training data, each token is used only once during training, with the exception of the Wikipedia and Books domains, over which we perform approximately two epochs.

\subsection{Architecture}

Following recent work on large language models, our network is based on the transformer architecture~[CITATION].
We leverage various improvements that were subsequently proposed, and used in different models such as PaLM.
Here are the main difference with the original architecture, and where we were found the inspiration for this change (in bracket):

\paragraph{Pre-normalization [GPT3].} To improve the training stability, we normalize the input of each transformer sub-layer, instead of normalizing the output. We use the RMSNorm normalizing function, introduced by [CITATION].

\paragraph{SwiGLU activation function [PaLM].} We replace the ReLU non-linearity by the SwiGLU activation function, introduced by [CITATION] to improve the performance. We use a dimension of \frac23 4d instead of 4d as in PaLM.

\paragraph{Rotary Embeddings [GPTNeo].}\hspace{-3pt}We remove the absolute positional embeddings, and instead, add rotary positional embeddings (RoPE), introduced by [CITATION], at each layer of the network.

The details of the hyper-parameters for our different models are given in Table~\ref{tab:architecture}.

[FIGURE] \textbf{Training loss over train tokens for the 7B, 13B, 33B, and 65 models.


\subsection{Optimizer}

Our models are trained using the AdamW optimizer~[CITATION], with the following hyper-parameters: \beta_1 = 0.9, \beta_2 = 0.95.
We use a cosine learning rate schedule, such that the final learning rate is equal to 10\% of the maximal learning rate.
We use a weight decay of 0.1 and gradient clipping of 1.0.
We use 2,000 warmup steps, and vary the learning rate and batch size with the size of the model (see Table~\ref{tab:architecture} for details).

\subsection{Efficient implementation}
We make several optimizations to improve the training speed of our models.
First, we use an efficient implementation of the causal multi-head attention to reduce memory usage and runtime.
This implementation, available in the \texttt{xformers} library,\footnote{https://github.com/facebookresearch/xformers} is inspired by~[CITATION] and uses the backward from~[CITATION].
This is achieved by not storing the attention weights and not computing the key/query scores that are masked due to the causal nature of the language modeling task.

\begin{table*}[t!]
 \centering
 \setlength{\tabcolsep}{5pt}
 \begin{tabular}{lrccccccccc}
 \toprule
 & & BoolQ & PIQA & SIQA & \hspace{-0.3cm} HellaSwag \hspace{-0.2cm} & \hspace{-0.2cm} WinoGrande \hspace{-0.3cm} & ARC-e & ARC-c & OBQA \\
 \midrule
 GPT-3 & 175B & 60.5 & 81.0 & - & 78.9 & 70.2 & 68.8 & 51.4 & 57.6 \\
 Gopher & 280B & 79.3 & 81.8 & 50.6 & 79.2 & 70.1 & - & - & - \\
 Chinchilla & 70B & 83.7 & 81.8 & 51.3 & 80.8 & 74.9 & - & - & - \\
 PaLM & 62B & 84.8 & 80.5 & - & 79.7 & 77.0 & 75.2 & 52.5 & 50.4 \\
 PaLM-cont & 62B & 83.9 & 81.4 & - & 80.6 & 77.0 & - & - & - \\
 PaLM & 540B & \tbf{88.0} & 82.3 & - & 83.4 & \tbf{81.1} & 76.6 & 53.0 & 53.4 \\
 \midrule
 \multirow{4}{*}{\model}
 & 7B & 76.5 & 79.8 & 48.9 & 76.1 & 70.1 & 72.8 & 47.6 & 57.2 \\
 & 13B & 78.1 & 80.1 & 50.4 & 79.2 & 73.0 & 74.8 & 52.7 & 56.4 \\
 & 33B & 83.1 & 82.3 & 50.4 & 82.8 & 76.0 & \tbf{80.0} & \tbf{57.8} & 58.6 \\
 & 65B & 85.3 & \tbf{82.8} & \tbf{52.3} & \tbf{84.2} & 77.0 & 78.9 & 56.0 & \tbf{60.2} \\
 \bottomrule
 \end{tabular}
 \caption{
 \textbf{Zero-shot performance on Common Sense Reasoning tasks.}
 \label{tab:commonsense}
 }
\end{table*}

To further improve training efficiency, we reduced the amount of activations that are recomputed during the backward pass with checkpointing.
More precisely, we save the activations that are expensive to compute, such as the outputs of linear layers.
This is achieved by manually implementing the backward function for the transformer layers, instead of relying on the PyTorch autograd.
To fully benefit from this optimization, we need to reduce the memory usage of the model by using model and sequence parallelism, as described by [CITATION]. Moreover, we also overlap the computation of activations and the communication between GPUs over the network (due to \texttt{all\_reduce} operations) as much as possible.

When training a 65B-parameter model, our code processes around 380 tokens/sec/GPU on 2048 A100 GPU with 80GB of RAM.
This means that training over our dataset containing 1.4T tokens takes approximately 21 days.

\section{Main results}
Following previous work~[CITATION], we consider zero-shot and few-shot tasks, and report results on a total of 20 benchmarks:
\begin{itemize}
\item\textbf{Zero-shot.}
We provide a textual description of the task and a test example.
The model either provides an answer using open-ended generation, or ranks the proposed answers.
\item\textbf{Few-shot.} 
We provide a few examples of the task (between 1 and 64) and a test example. The model takes this text as input and generates the answer or ranks different options.
\end{itemize}

We compare \model with other foundation models, namely the non-publicly available language models GPT-3~[CITATION], Gopher~[CITATION], Chinchilla~[CITATION] and PaLM~[CITATION], as well as the open-sourced OPT models~[CITATION], GPT-J~[CITATION], and GPT-Neo~[CITATION].
In Section~\ref{sec:instruct}, we also briefly compare \model with instruction-tuned models such as OPT-IML~[CITATION] and Flan-PaLM~[CITATION].

We evaluate \model on free-form generation tasks and multiple choice tasks.
In the multiple choice tasks, the objective is to select the most appropriate completion among a set of given options, based on a provided context.
We select the completion with the highest likelihood given the provided context.
We follow [CITATION] and use the likelihood normalized by the number of characters in the completion, except for certain datasets (OpenBookQA, BoolQ), for which we follow [CITATION], and select a completion based on the likelihood normalized by the likelihood of the completion given ``Answer:'' as context: {\scriptstyle P ( \mathtt{completion} \mid \mathtt{context})/P(\mathtt{completion} \mid ``Answer:" ) }.

[TABLE] \textbf{NaturalQuestions.


\subsection{Common Sense Reasoning}

We consider eight standard common sense reasoning benchmarks: BoolQ~[CITATION], PIQA~[CITATION], SIQA~[CITATION], HellaSwag~[CITATION], WinoGrande~[CITATION], ARC easy and challenge~[CITATION] and OpenBookQA~[CITATION].
These datasets include Cloze and Winograd style tasks, as well as multiple choice question answering.
We evaluate in the zero-shot setting as done in the language modeling community.

In Table~\ref{tab:commonsense}, we compare with existing models of various sizes and report numbers from the corresponding papers.
First, \model-65B outperforms Chinchilla-70B on all reported benchmarks but BoolQ.
Similarly, this model surpasses PaLM-540B everywhere but on BoolQ and WinoGrande.
\model-13B model also outperforms GPT-3 on most benchmarks despite being 10\times smaller.

\subsection{Closed-book Question Answering}

We compare \model to existing large language models on two closed-book question answering benchmarks: Natural Questions~[CITATION] and TriviaQA~[CITATION].
For both benchmarks, we report exact match performance in a closed book setting, i.e., where the models do not have access to documents that contain evidence to answer the question.
In Table~\ref{tab:nqa}, we report performance on NaturalQuestions, and in Table~\ref{tab:tqa}, we report on TriviaQA.
On both benchmarks, \model-65B achieve state-of-the-arts performance in the zero-shot and few-shot settings.
More importantly, the \model-13B is also competitive on these benchmarks with GPT-3 and Chinchilla, despite being 5-10\times smaller. 
This model runs on a single V100 GPU during inference.

[TABLE] \textbf{TriviaQA.


\subsection{Reading Comprehension}
We evaluate our models on the RACE reading comprehension benchmark~[CITATION].
This dataset was collected from English reading comprehension exams designed for middle and high school Chinese students.
We follow the evaluation setup from~[CITATION]
and report results in Table~\ref{tab:readingcomprehension}.
On these benchmarks, \model-65B is competitive with PaLM-540B, and, \model-13B outperforms GPT-3 by a few percents.

[TABLE] \textbf{Reading Comprehension.


\subsection{Mathematical reasoning}

We evaluate our models on two mathematical reasoning benchmarks: MATH~[CITATION] and GSM8k~[CITATION].
MATH is a dataset of 12K middle school and high school mathematics problems written in LaTeX.
GSM8k is a set of middle school mathematical problems.
In Table~\ref{tab:math}, we compare with PaLM and Minerva~[CITATION].
Minerva is a series of PaLM models finetuned on 38.5B tokens extracted from ArXiv and Math Web Pages, while neither PaLM or \model are finetuned on mathematical data.
The numbers for PaLM and Minerva are taken from~[CITATION], and we compare with and without \texttt{maj1@k}.
\texttt{maj1@k} denotes evaluations where we generate k samples for each problem and perform a majority voting~[CITATION].
On GSM8k, we observe that \model-65B outperforms Minerva-62B, although it has not been fine-tuned on mathematical data.

[TABLE] \textbf{Model performance on quantitative reasoning datasets.


\subsection{Code generation}
\label{sec:codegen}
We evaluate the ability of our models to write code from a natural language
description on two benchmarks: HumanEval~[CITATION] and MBPP~[CITATION].
For both tasks, the model receives a description of the program in a few sentences, as well as a few input-output examples. 
In HumanEval, it also receives a function signature, and the prompt is formatted as natural code with the textual description and tests in a docstring. 
The model needs to generate a Python program that fits the description and satisfies the test cases.
In Table~\ref{tab:code}, we compare the pass@1 scores of our models with existing language models that have not been finetuned on code, namely PaLM and LaMDA~[CITATION]. PaLM and \model were trained on datasets that contain a similar number of code tokens.

As show in Table~\ref{tab:code}, for a similar number of parameters, \model outperforms other general models such as LaMDA and PaLM, which are not trained or finetuned specifically for code.
\model with 13B parameters and more outperforms LaMDA 137B on both HumanEval and MBPP. 
\model 65B also outperforms PaLM 62B, even when it is trained longer. 
The pass@1 results reported in this table were obtained by sampling with temperature 0.1. The pass@100 and pass@80 metrics were obtained with temperature 0.8. We use the same method as~[CITATION] to obtain unbiased estimates of the pass@k.

It is possible to improve the performance on code by finetuning on code-specific tokens.
For instance, PaLM-Coder~[CITATION] increases the pass@1 score of PaLM on HumanEval from 26.2\% for PaLM to 36\%.
Other models trained specifically for code also perform better than general models on these tasks~[CITATION].
Finetuning on code tokens is beyond the scope of this paper.

[TABLE] \textbf{Model performance for code generation.


\begin{table*}[t!]
 \center
 \begin{tabular}{lrcccccc}
 \toprule
 & & Humanities & STEM & Social Sciences & Other & Average\\
 \midrule
 GPT-NeoX & 20B & 29.8 & 34.9 & 33.7 & 37.7 & 33.6 \\
 GPT-3 & 175B & 40.8 & 36.7 & 50.4 & 48.8 & 43.9 \\
 Gopher & 280B & 56.2 & 47.4 & 71.9 & 66.1 & 60.0 \\
 Chinchilla & 70B & 63.6 & 54.9 & 79.3 & \tbf{73.9} & 67.5\\
 \midrule
 \multirow{3}{*}{PaLM}
 & 8B & 25.6 & 23.8 & 24.1 & 27.8 & 25.4 \\
 & 62B & 59.5 & 41.9 & 62.7 & 55.8 & 53.7 \\
 & 540B & \tbf{77.0} & \tbf{55.6} & \tbf{81.0} & 69.6 & \tbf{69.3} \\
 \midrule
 \multirow{4}{*}{\model}
 & 7B & 34.0 & 30.5 & 38.3 & 38.1 & 35.1 \\
 & 13B & 45.0 & 35.8 & 53.8 & 53.3 & 46.9 \\
 & 33B & 55.8 & 46.0 & 66.7 & 63.4 & 57.8 \\
 & 65B & 61.8 & 51.7 & 72.9 & 67.4 & 63.4 \\
 \bottomrule
 \end{tabular}
 \caption{
 \textbf{Massive Multitask Language Understanding (MMLU).} Five-shot accuracy.
 \label{tab:mmlu}
 }
\end{table*}
\subsection{Massive Multitask Language Understanding}
The massive multitask language understanding benchmark, or MMLU, introduced by [CITATION] consists of multiple choice questions covering various domains of knowledge, including humanities, STEM and social sciences. 
We evaluate our models in the 5-shot setting, using the examples provided by the benchmark, and report results in Table~\ref{tab:mmlu}.
On this benchmark, we observe that the \model-65B is behind both Chinchilla-70B and PaLM-540B by a few percent in average, and across most domains.
A potential explanation is that we have used a limited amount of books and academic papers in our pre-training data, i.e., ArXiv, Gutenberg and Books3, that sums up to only 177GB, while these models were trained on up to 2TB of books.
This large quantity of books used by Gopher, Chinchilla and PaLM may also explain why Gopher outperforms GPT-3 on this benchmark, while it is comparable on other benchmarks.

\begin{figure*}[t]
\centering
\includegraphics[width=\linewidth]{figures/all_evals.pdf}
\caption{
\textbf{Evolution of performance on question answering and common sense reasoning during training.}
\label{fig:evals}
}
\end{figure*}

\subsection{Evolution of performance during training}

 During training, we tracked the performance of our models on a few question answering and common sense benchmarks, and report them in Figure~\ref{fig:evals}.
On most benchmarks, the performance improves steadily, and correlates with the training perplexity of the model (see Figure~\ref{fig:trainincurves}). 
The exceptions are SIQA and WinoGrande.
Most notably, on SIQA, we observe a lot of variance in performance, that may indicate that this benchmark is not reliable.
On WinoGrande, the performance does not correlate as well with training perplexity: the \model-33B and \model-65B have similar performance during the training. 

\section{Instruction Finetuning}
\label{sec:instruct}

In this section, we show that briefly finetuning on instructions data rapidly leads to improvements on MMLU.

Although the non-finetuned version of \model-65B is already able to follow basic instructions, we observe that a very small amount of finetuning improves the performance on MMLU, and further improves the ability of the model to follow instructions.
Since this is not the focus of this paper, we only conducted a single experiment following the same protocol as~[CITATION] to train an instruct model, \model-I.

[TABLE] \textbf{Instruction finetuning -- MMLU (5-shot).


In Table~\ref{tab:instruct}, we report the results of our instruct model \model-I on MMLU and compare with existing instruction finetuned models of moderate sizes, namely, OPT-IML~[CITATION] and the Flan-PaLM series~[CITATION]. 
All the reported numbers are from the corresponding papers.
Despite the simplicity of the instruction finetuning approach used here, we reach 68.9\% on MMLU.
\model-I (65B) outperforms on MMLU existing instruction finetuned models of moderate sizes, but are still far from the state-of-the-art, that is 77.4 for GPT \texttt{code-davinci-002} on MMLU (numbers taken from~[CITATION]).
The details of the performance on MMLU on the 57 tasks can be found in Table~\ref{tab:mmluapp} of the appendix.

\section{Bias, Toxicity and Misinformation}

Large language models have been showed to reproduce and amplify biases that are existing in the training data~[CITATION], and to generate toxic or offensive content~[CITATION].
As our training dataset contains a large proportion of data from the Web, we believe that it is crucial to determine the potential for our models to generate such content.
To understand the potential harm of \model-65B, we evaluate on different benchmarks that measure toxic content production and stereotypes detection.
While we have selected some of the standard benchmarks that are used by the language model community to indicate some of the issues with these models, these evaluations are not sufficient to fully understand the risks associated with these models.

\subsection{RealToxicityPrompts}

Language models can generate toxic language, e.g., insults, hate speech or threats.
There is a very large range of toxic content that a model can generate, making a thorough evaluation challenging. 
Several recent work~[CITATION] have considered the RealToxicityPrompts benchmark~[CITATION] as an indicator of how toxic is their model.
RealToxicityPrompts consists of about 100k prompts that the model must complete; then a toxicity score is automatically evaluated by making a request to PerspectiveAPI~\footnote{\url{https://perspectiveapi.com/}}. 
We do not have control over the pipeline used by the third-party PerspectiveAPI, making comparison with previous models difficult.

[TABLE] \textbf{RealToxicityPrompts.


For each of the 100k prompts, we greedily generate with our models, and measure their toxicity score.
The score per prompt ranges from 0 (non-toxic) to 1 (toxic). 
In Table~\ref{tab:RealToxicityPrompts}, we report our averaged score on basic and respectful prompt categories of RealToxicityPrompts.
These scores are ``comparable'' with what we observe in the literature (e.g., 0.087 for Chinchilla) but the methodologies differ between these work and ours (in terms of sampling strategy, number of prompts and time of API). 
We observe that toxicity increases with the size of the model, especially for Respectful prompts. 
This was also observed in previous work~[CITATION], with the notable exception of [CITATION] where they do not see a difference between Chinchilla and Gopher, despite different sizes.
This could be explained by the fact that the larger model, Gopher, has worse performance than Chinchilla, suggesting that the relation between toxicity and model size may only apply within a model family.

\subsection{CrowS-Pairs}

We evaluate the biases in our model on the CrowS-Pairs~[CITATION].
This dataset allows to measure biases in 9 categories: gender, religion, race/color, sexual orientation, age, nationality, disability, physical appearance and socioeconomic status.
Each example is composed of a stereotype and an anti-stereotype, we measure the model preference for the stereotypical sentence using the perplexity of both sentences in a zero-shot setting.
Higher scores thus indicate higher bias.
We compare with GPT-3 and OPT-175B in Table~\ref{tab:crows}.

\model compares slightly favorably to both models on average.
Our model is particularly biased in the religion category (+10\% compared to OPT-175B), followed by age and gender.
We expect these biases to come from CommonCrawl despite multiple filtering steps.

[TABLE] \textbf{CrowS-Pairs.


\subsection{WinoGender}

To further investigate the biases of our model on the gender category, we look at the WinoGender benchmark~[CITATION], a co-reference resolution dataset. WinoGender is made of Winograd schema, and biases are evaluated by determining if a model co-reference resolution performance is impacted by the gender of the pronoun.

 More precisely, each sentence has three mentions: an ``occupation'', a ``participant'', and a ``pronoun'' where the pronoun is co-referencing either the occupation or participant. 
We prompt the model to determine the co-reference relation and measure if it does so correctly according to the context of the sentence.
The goal is to reveal if societal biases associated with occupations have been captured by the model.
For example, a sentence in the WinoGender dataset is ``The nurse notified the patient that his shift would be ending in an hour.'', which is followed by \texttt{`His' refers to}.
We then compare the perplexity of the continuations \texttt{the nurse} and \texttt{the patient} to perform co-reference resolution with the model.
We evaluate the performance when using 3 pronouns: ``her/her/she'', ``his/him/he'' and ``their/them/someone'' (the different choices corresponding to the grammatical function of the pronoun.

In Table~\ref{tab:winogender}, we report the co-reference scores for the three different pronouns contained in the dataset.
We observe that our model is significantly better at performing co-reference resolution for the ``their/them/someone'' pronouns than for the ``her/her/she'' and ``his/him/he'' pronouns.
A similar observation was made in previous work~[CITATION], and is likely indicative of gender bias.
Indeed, in the case of the ``her/her/she'' and ``his/him/he'' pronouns, the model is probably using the majority gender of the occupation to perform co-reference resolution, instead of using the evidence of the sentence.

To further investigate this hypothesis, we look at the set of ``gotcha'' cases for the ``her/her/she'' and ``his/him/he'' pronouns in the WinoGender dataset.
Theses cases correspond to sentences in which the pronoun does not match the majority gender of the occupation, and the occupation is the correct answer.
In Table~\ref{tab:winogender}, we observe that our model, \model-65B, makes more errors on the gotcha examples, clearly showing that it capture societal biases related to gender and occupation.
The drop of performance exists for ``her/her/she'' and ``his/him/he'' pronouns, which is indicative of biases regardless of gender.

[TABLE] \textbf{WinoGender.


\subsection{TruthfulQA}

TruthfulQA~[CITATION] aims to measure the truthfulness of a model, i.e., its ability to identify when a claim is true.
[CITATION] consider the definition of ``true'' in the sense of ``literal truth about the real world'', and not claims that are only true in the context of a belief system or tradition.
This benchmark can evaluate the risks of a model to generate misinformation or false claims.
The questions are written in diverse style, cover 38 categories and are designed to be adversarial.

In Table~\ref{tab:TuthfulQA}, we report the performance of our models on both questions to measure truthful models and the intersection of truthful and informative. 
Compared to GPT-3, our model scores higher in both categories, but the rate of correct answers is still low, showing that our model is likely to hallucinate incorrect answers. 

[TABLE] \textbf{TruthfulQA.


\begin{table*}[t]
 \centering
 \begin{tabular}{l ccccc}
 \toprule
 & \multirow{2}{*}{GPU Type} & GPU Power & \multirow{2}{*}{GPU-hours} & Total power & Carbon emitted\\
 & & consumption & & consumption & (tCO_2eq)\\
\midrule
OPT-175B & A100-80GB & 400W & 809,472 & 356 MWh & 137 \\
BLOOM-175B & A100-80GB & 400W & 1,082,880 & 475 MWh & 183\\
\midrule
\model-7B & A100-80GB & 400W & 82,432 & ~36 MWh & ~14 \\
\model-13B & A100-80GB & 400W & 135,168 & ~59 MWh & ~23 \\
\model-33B & A100-80GB & 400W & 530,432 & 233 MWh & ~90 \\
\model-65B & A100-80GB & 400W & 1,022,362 & 449 MWh & 173 \\ 
 \bottomrule
 \end{tabular}
 \caption{
 \textbf{Carbon footprint of training different models in the same data center.}
 We follow~[CITATION] to compute carbon emission of training OPT, BLOOM and our models in the same data center. For the power consumption of a A100-80GB, we take the thermal design power for NVLink systems, that is 400W. We take a PUE of 1.1 and a carbon intensity factor set at the national US average of 0.385 kg CO_2e per KWh.
 \label{tab:cf}

 }
\end{table*}

\section{Carbon footprint}

The training of our models have consumed a massive quantity of energy, responsible for the emission of carbon dioxide. 
We follow the recent literature on the subject and breakdown both the total energy consumption and the resulting carbon footprint in Table~\ref{tab:cf}.
We follow a formula for [CITATION] to estimate the Watt-hour, Wh, needed to train a model, as well as the tons of carbon emissions, tCO_2eq.
For the Wh, we use the formula:
\textrm{Wh} = \textrm{GPU-h}\times(\textrm{GPU power consumption}) \times \textrm{PUE}, where we set the Power Usage Effectiveness (PUE) at 1.1.
The resulting carbon emission depends on the location of the data center used to train the network. For instance, BLOOM uses a grid that emits 0.057 kg CO_2eq/KWh leading to 27 tCO_2eq and OPT a grid that emits 0.231 kg CO_2eq/KWh, leading to 82 tCO_2eq.
In this study, we are interested in comparing the cost in carbon emission of training of these models if they were trained in the same data center.
Hence, we do not take the location of data center in consideration, and use, instead, the US national average carbon intensity factor of 0.385 kg CO_2eq/KWh.
This leads to the following formula for the tons of carbon emissions:
\textrm{tCO}_2\textrm{eq}=\textrm{MWh}\times0.385.
We apply the same formula to OPT and BLOOM for fair comparison.
For OPT, we assume training required 34 days on 992 A100-80B (see their logs\footnote{\url{https://github.com/facebookresearch/metaseq/tree/main/projects/OPT/chronicles}}).
Finally, we estimate that we used 2048 A100-80GB for a period of approximately 5 months to develop our models.
This means that developing these models would have cost around 2,638 MWh under our assumptions, and a total emission of 1,015 tCO_2eq.
We hope that releasing these models will help to reduce future carbon emission since the training is already done, and some of the models are relatively small and can be run on a single GPU.

\section{Related work}
\paragraph{Language models} are probability distributions over sequences of words, tokens or characters~[CITATION].
This task, often framed as next token prediction, has long been considered a core problem in natural language processing~[CITATION].
Because [CITATION] proposed to measure machine intelligence by using language through the ``imitation game'', language modeling has been proposed as a benchmark to measure progress toward artificial intelligence~[CITATION].

\paragraph{Architecture.} Traditionally, language models were based on n-gram count statistics~[CITATION], and various smoothing techniques were proposed to improve the estimation of rare events~[CITATION].
In the past two decades, neural networks have been successfully applied to the language modelling task, starting from feed forward models~[CITATION], recurrent neural networks~[CITATION] and LSTMs~[CITATION].
More recently, transformer networks, based on self-attention, have led to important improvements, especially for capturing long range dependencies~[CITATION].

\paragraph{Scaling.} There is a long history of scaling for language models, for both the model and dataset sizes.
[CITATION] showed the benefits of using language models trained on 2 trillion tokens, resulting in 300 billion n-grams, on the quality of machine translation.
While this work relied on a simple smoothing technique, called \emph{Stupid Backoff}, [CITATION] later showed how to scale Kneser-Ney smoothing to Web-scale data.
This allowed to train a 5-gram model on 975 billions tokens from CommonCrawl, resulting in a model with 500 billions n-grams~[CITATION].
[CITATION] introduced the \emph{One Billion Word} benchmark, a large scale training dataset to measure the progress of language models.

In the context of neural language models, [CITATION] obtained state-of-the-art results on the Billion Word benchmark by scaling LSTMs to 1 billion parameters.
Later, scaling transformers lead to improvement on many NLP tasks.
Notable models include BERT~[CITATION], GPT-2~[CITATION], Megatron-LM~[CITATION], and T5~[CITATION].
A significant breakthrough was obtained with GPT-3~[CITATION], a model with 175 billion parameters.
This lead to a series of \emph{Large Language Models}, such as Jurassic-1~[CITATION], Megatron-Turing NLG~[CITATION], Gopher~[CITATION], Chinchilla~[CITATION], PaLM~[CITATION], OPT~[CITATION], and GLM~[CITATION].
[CITATION] and [CITATION] studied the impact of scaling on the performance of deep learning models, showing the existence of power laws between the model and dataset sizes and the performance of the system.
[CITATION] derived power laws specifically for transformer based language models, which were later refined by [CITATION], by adapting the learning rate schedule when scaling datasets.
Finally, [CITATION] studied the effect of scaling on the abilities of large language models.

\section{Conclusion}

 In this paper, we presented a series of language models that are released openly, and competitive with state-of-the-art foundation models. Most notably, \model-13B outperforms GPT-3 while being more than 10\times smaller, and \model-65B is competitive with Chinchilla-70B and PaLM-540B. Unlike previous studies, we show that it is possible to achieve state-of-the-art performance by training exclusively on publicly available data, without resorting to proprietary datasets.
We hope that releasing these models to the research community will accelerate the development of large language models, and help efforts to improve their robustness and mitigate known issues such as toxicity and bias.
Additionally, we observed like [CITATION] that finetuning these models on instructions lead to promising results, and we plan to further investigate this in future work.
Finally, we plan to release larger models trained on larger pretraining corpora in the future, since we have seen a constant improvement in performance as we were scaling.

\section*{Acknowledgements}
 We thank Daniel Haziza, Francisco Massa, Jeremy Reizenstein, Artem Korenev, and Patrick Labatut from the xformers team.
We thank Susan Zhang and Stephen Roller for their support on data deduplication.
We thank Luca Wehrstedt, Vegard Mella, and Pierre-Emmanuel Mazaré for their support on training stability.
We thank Shubho Sengupta, Kalyan Saladi, and all the AI infra team for their support.
We thank Jane Yu for her input on evaluation.
We thank Yongyi Hu for his help on data collection.

\bibliography{custom}
\bibliographystyle{acl_natbib}

\clearpage
\appendix
\onecolumn
\pagenumbering{Roman} 

\section{Question Answering}
We evaluate \model on Natural Questions and TriviaQA.
For Natural Questions we use the test split used for open-domain question answering containing 3610 questions.
For TriviaQA we evaluate on the dev set of the filtered set.
This differs from GPT-3 and PaLM, which evaluate on the test set of the unfiltered set for which the online evaluation server is not available anymore\footnote{\url{https://competitions.codalab.org/competitions/17208}}.

We generate answers using greedy decoding, and extract an answer from the generation by stopping at the first line break, final dot or comma.
Generated answers are evaluated with the standard exact match metric:
a generated answer is considered correct if it matches any answer of the list of answers after normalization.
For this normalization step we lowercase generated answers and remove articles, punctuation and duplicate whitespaces.
Figure~\ref{fig:qa} presents formatted examples in the 1-shot setting for Natural Questions and TriviaQA respectively.
In all settings, we preprend the string {\tt Answer these questions:\textbackslash n} to the list of questions and answers.

[FIGURE] Formatted dataset example for Natural Questions (left) \& TriviaQA (right).


\clearpage
\begin{figure*}
\section{MMLU}
\end{figure*}

\begin{table*}
 \center
 \setlength{\tabcolsep}{4pt}
 \scalebox{0.72}{
 \begin{tabular}{@{}lr cc cc cc cccc c c@{}}
 \toprule
 & & GPT-3 && Gopher && Chinchilla && \multicolumn{4}{c}{\model} && \model-I \\
 \cmidrule(lr){3-3} \cmidrule(lr){5-5} \cmidrule(lr){7-7} \cmidrule(lr){9-12} \cmidrule(lr){14-14}
 & & 175B && 280B && 70B && 7B & 13B & 33B & 65B && 65B \\
 \midrule
Abstract Algebra & STEM & 30.0 && 25.0 && 31.0 && 29.0 & 34.0 & 32.0 & 34.0 && 31.0 \\
Anatomy & STEM & 48.0 && 56.3 && 70.4 && 37.0 & 45.9 & 51.9 & 57.8 && 62.2 \\
Astronomy & STEM & 49.0 && 65.8 && 73.0 && 33.6 & 46.1 & 61.8 & 72.4 && 81.6 \\
Business Ethics & Other & 46.0 && 70.0 && 72.0 && 40.0 & 45.0 & 56.0 & 57.0 && 72.0 \\
Clinical Knowledge & Other & 48.0 && 67.2 && 75.1 && 35.1 & 45.7 & 57.4 & 65.3 && 69.1 \\
College Biology & STEM & 45.0 && 70.8 && 79.9 && 37.5 & 45.1 & 58.3 & 68.8 && 81.9 \\
College Chemistry & STEM & 26.0 && 45.0 && 51.0 && 32.0 & 30.0 & 45.0 & 50.0 && 45.0 \\
College Computer Science & STEM & 46.0 && 49.0 && 51.0 && 29.0 & 39.0 & 45.0 & 47.0 && 51.0 \\
College Mathematics & STEM & 34.5 && 37.0 && 32.0 && 33.0 & 32.0 & 40.0 & 35.0 && 36.0 \\
College Medicine & Other & 48.0 && 60.1 && 66.5 && 30.6 & 42.8 & 52.0 & 54.3 && 63.0 \\
College Physics & STEM & 28.0 && 34.3 && 46.1 && 26.5 & 18.6 & 28.4 & 36.3 && 46.1 \\
Computer Security & STEM & 57.0 && 65.0 && 76.0 && 45.0 & 65.0 & 66.0 & 79.0 && 79.0 \\
Conceptual Physics & STEM & 36.5 && 49.4 && 67.2 && 36.6 & 41.3 & 51.5 & 59.6 && 66.4 \\
Econometrics & Social Science & 33.0 && 43.0 && 38.6 && 23.7 & 27.2 & 35.1 & 40.4 && 52.6 \\
Electrical Engineering & STEM & 50.0 && 60.0 && 62.1 && 26.9 & 40.7 & 49.7 & 53.8 && 60.7 \\
Elementary Mathematics & STEM & 30.0 && 33.6 && 41.5 && 24.3 & 24.9 & 36.0 & 37.8 && 42.9 \\
Formal Logic & Humanities & 29.0 && 35.7 && 33.3 && 27.0 & 33.3 & 34.1 & 44.4 && 47.6 \\
Global Facts & Other & 37.0 && 38.0 && 39.0 && 29.0 & 35.0 & 35.0 & 39.0 && 40.0 \\
High School Biology & STEM & 48.0 && 71.3 && 80.3 && 34.5 & 52.6 & 67.7 & 73.9 && 82.9 \\
High School Chemistry & STEM & 33.0 && 47.8 && 58.1 && 28.1 & 28.6 & 41.9 & 40.4 && 44.8 \\
High School Computer Science & STEM & 39.0 && 54.0 && 58.0 && 31.0 & 48.0 & 60.0 & 67.0 && 73.0 \\
High School European History & Humanities & 54.0 && 72.1 && 78.8 && 44.2 & 61.8 & 73.9 & 78.8 && 86.1 \\
High School Geography & Social Science & 58.0 && 76.8 && 86.4 && 34.3 & 54.6 & 70.7 & 77.8 && 87.9 \\
High School Government And Politics & Social Science & 58.0 && 83.9 && 91.2 && 44.6 & 66.3 & 82.9 & 88.1 && 92.8 \\
High School Macroeconomics & Social Science & 40.5 && 65.1 && 70.5 && 35.4 & 44.4 & 56.9 & 65.9 && 69.2 \\
High School Mathematics & STEM & 28.0 && 23.7 && 31.9 && 24.8 & 23.7 & 27.0 & 34.4 && 37.0 \\
High School Microeconomics & Social Science & 42.0 && 66.4 && 77.7 && 31.9 & 47.5 & 55.5 & 68.9 && 78.6 \\
High School Physics & STEM & 28.0 && 33.8 && 36.4 && 26.5 & 28.5 & 35.8 & 37.1 && 41.7 \\
High School Psychology & Social Science & 61.0 && 81.8 && 86.6 && 47.3 & 60.9 & 76.2 & 82.2 && 87.9 \\
High School Statistics & STEM & 30.5 && 50.0 && 58.8 && 35.2 & 30.1 & 45.4 & 58.3 && 59.3 \\
High School Us History & Humanities & 53.0 && 78.9 && 83.3 && 39.7 & 58.3 & 77.9 & 83.8 && 90.7 \\
High School World History & Humanities & 56.0 && 75.1 && 85.2 && 40.9 & 66.2 & 79.3 & 83.1 && 89.0 \\
Human Aging & Other & 50.0 && 66.4 && 77.6 && 40.8 & 54.7 & 67.7 & 69.5 && 72.2 \\
Human Sexuality & Social Science & 54.0 && 67.2 && 86.3 && 36.6 & 58.8 & 64.1 & 77.9 && 87.0 \\
International Law & Humanities & 55.5 && 77.7 && 90.9 && 51.2 & 62.8 & 72.7 & 79.3 && 87.6 \\
Jurisprudence & Humanities & 55.0 && 71.3 && 79.6 && 38.9 & 51.9 & 70.4 & 73.2 && 85.2 \\
Logical Fallacies & Humanities & 48.0 && 72.4 && 80.4 && 39.3 & 52.8 & 68.1 & 77.3 && 80.4 \\
Machine Learning & STEM & 31.0 && 41.1 && 41.1 && 23.2 & 31.3 & 39.3 & 49.1 && 52.7 \\
Management & Other & 56.0 && 77.7 && 82.5 && 35.0 & 66.0 & 77.7 & 82.5 && 83.5 \\
Marketing & Other & 60.0 && 83.3 && 89.7 && 46.6 & 71.8 & 83.3 & 85.9 && 92.7 \\
Medical Genetics & Other & 40.0 && 69.0 && 69.0 && 43.0 & 52.0 & 67.0 & 67.0 && 68.0 \\
Miscellaneous & Other & 60.0 && 75.7 && 84.5 && 42.4 & 65.4 & 78.5 & 82.1 && 84.3 \\
Moral Disputes & Humanities & 44.5 && 66.8 && 77.5 && 40.2 & 50.9 & 66.2 & 72.3 && 76.9 \\
Moral Scenarios & Humanities & 26.0 && 40.2 && 36.5 && 24.3 & 30.1 & 38.2 & 48.9 && 55.9 \\
Nutrition & Other & 47.0 && 69.9 && 77.1 && 37.6 & 51.6 & 62.8 & 67.3 && 74.5 \\
Philosophy & Humanities & 51.0 && 68.8 && 79.4 && 39.9 & 54.0 & 66.2 & 74.0 && 79.1 \\
Prehistory & Humanities & 53.0 && 67.6 && 81.2 && 36.1 & 51.5 & 67.0 & 75.3 && 79.0 \\
Professional Accounting & Other & 33.0 && 44.3 && 52.1 && 25.9 & 35.8 & 43.6 & 46.5 && 56.0 \\
Professional Law & Humanities & 34.5 && 44.5 && 56.5 && 30.2 & 38.0 & 45.9 & 49.1 && 54.4 \\
Professional Medicine & Other & 36.0 && 64.0 && 75.4 && 44.5 & 50.4 & 54.0 & 61.4 && 70.6 \\
Professional Psychology & Social Science & 44.5 && 68.1 && 75.7 && 35.1 & 47.7 & 62.9 & 65.7 && 71.4 \\
Public Relations & Social Science & 48.0 && 71.8 && 73.6 && 40.9 & 60.9 & 67.3 & 73.6 && 74.6 \\
Security Studies & Social Science & 52.0 && 64.9 && 75.9 && 31.8 & 53.9 & 65.3 & 71.8 && 77.6 \\
Sociology & Social Science & 53.0 && 84.1 && 91.0 && 46.8 & 61.2 & 78.6 & 78.6 && 88.1 \\
Us Foreign Policy & Social Science & 69.0 && 81.0 && 92.0 && 46.0 & 80.0 & 83.0 & 86.0 && 87.0 \\
Virology & Other & 46.0 && 47.0 && 53.6 && 30.1 & 43.4 & 50.0 & 53.0 && 57.8 \\
World Religions & Humanities & 55.0 && 84.2 && 87.7 && 50.9 & 67.8 & 81.3 & 81.3 && 84.2 \\ \midrule
Humanities & & 40.6 && 56.2 && 63.6 && 34.0 & 45.0 & 55.8 & 61.8 && 67.4 \\
STEM & & 36.7 && 47.4 && 54.9 && 30.5 & 35.8 & 46.0 & 51.7 && 56.6 \\
Social Science & & 50.5 && 71.9 && 79.3 && 38.3 & 53.8 & 66.7 & 72.9 && 79.2 \\
Others & & 49.0 && 66.1 && 73.9 && 38.1 & 53.3 & 63.4 & 67.4 && 72.6 \\ \midrule
All & & 43.9 && 60.0 && 67.6 && 35.1 & 46.9 & 57.8 & 63.4 && 68.9 \\
 \bottomrule
 \end{tabular}}
 \caption{
 \textbf{MMLU.} Detailed 5-shot results per domain on the test sets.
 \label{tab:mmluapp}
 }
\end{table*}

\clearpage

\section{Generations from \model-65B}
In this section, we show some examples of generations obtained with \model-65B (without instruction finetuning). Prompts are in bold.

\newpage

\newpage

\begin{figure*}

\section{Generations from \model-I}
\label{sec:prompt}
We show a few examples of generations with \model-I, i.e. \model-65B fine-tuned with the protocol and instruction dataset from [CITATION].
\end{figure*}