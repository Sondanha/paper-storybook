[
  {
    "scene_id": 1,
    "title": "연구 동기와 문제 정의",
    "narration": "이 연구는 기존 객체 탐지 모델의 한계를 설명하며 시작합니다. 현재 객체 탐지 시스템들은 분류기를 재활용하여 탐지를 수행합니다. 이러한 접근법은 복잡한 파이프라인으로 인해 느리고 최적화하기 어려운 문제가 있습니다.",
    "visualizations": [
      {
        "viz_type": "diagram",
        "tool": "graphviz",
        "viz_label": "기존 객체 탐지 파이프라인",
        "viz_prompt": "digraph G { rankdir=LR; Classifier -> SlidingWindow -> NMS; }"
      },
      {
        "viz_type": "diagram",
        "tool": "graphviz",
        "viz_label": "제안하는 end-to-end 접근법",
        "viz_prompt": "digraph G { rankdir=LR; Input -> DetectionModel -> Boxes_And_Probs; }"
      }
    ]
  },
  {
    "scene_id": 2,
    "title": "제안된 방법론",
    "narration": "연구진은 객체 탐지를 회귀 문제로 재정의하여, 한 번의 신경망 평가로 경계 상자 좌표와 클래스 확률을 직접 예측하는 YOLO 모델을 제안합니다. 이를 통해 전체 탐지 파이프라인을 end-to-end로 최적화할 수 있습니다.",
    "visualizations": [
      {
        "viz_type": "diagram",
        "tool": "graphviz",
        "viz_label": "YOLO object detection",
        "viz_prompt": "digraph G { rankdir=LR; Input -> YOLO_Model -> Bounding_Boxes_and_Class_Probs; }"
      },
      {
        "viz_type": "diagram",
        "tool": "graphviz",
        "viz_label": "end-to-end optimization",
        "viz_prompt": "digraph G { rankdir=LR; Image_Pixels -> Model -> Boxes_and_Probs; }"
      }
    ]
  },
  {
    "scene_id": 3,
    "title": "YOLO 모델의 장점",
    "narration": "YOLO 모델은 기존 방식에 비해 매우 빠르며, 실시간으로 동작할 수 있습니다. 또한 YOLO는 일반적인 객체 표현을 학습하여 자연 이미지 외에도 다른 도메인, 예를 들어 미술 작품에서도 뛰어난 성능을 보입니다.",
    "visualizations": [
      {
        "viz_type": "diagram",
        "tool": "graphviz",
        "viz_label": "YOLO 모델의 속도 비교",
        "viz_prompt": "digraph G { rankdir=LR; OtherDetectors -> SlowerSpeed; YOLO -> FasterSpeed; FastYOLO -> HighestSpeed; }"
      },
      {
        "viz_type": "diagram",
        "tool": "graphviz",
        "viz_label": "YOLO 모델의 일반화 능력",
        "viz_prompt": "digraph G { rankdir=LR; NaturalImages -> YOLOPerformance; Artwork -> YOLOOutperformance; }"
      }
    ]
  },
  {
    "scene_id": 4,
    "title": "YOLO의 작동 원리",
    "narration": "YOLO는 입력 이미지 전체를 한 번에 처리하여 경계 상자와 클래스 확률을 직접 예측합니다. 이는 기존 방식과 달리 객체 탐지를 회귀 문제로 바라보는 접근법입니다.",
    "visualizations": [
      {
        "viz_type": "diagram",
        "tool": "graphviz",
        "viz_label": "YOLO 접근법",
        "viz_prompt": "digraph G { rankdir=LR; Image -> YOLO_Model -> Boxes_And_Probs; }"
      },
      {
        "viz_type": "diagram",
        "tool": "graphviz",
        "viz_label": "기존 객체 탐지 접근법",
        "viz_prompt": "digraph G { rankdir=LR; Image -> Classifier -> Proposals -> NMS -> Boxes_And_Probs; }"
      }
    ]
  },
  {
    "scene_id": 5,
    "title": "YOLO의 성능 평가",
    "narration": "YOLO는 기존 탐지 시스템에 비해 경계 상자 정확도가 다소 낮지만, 배경에 대한 잘못된 탐지 확률이 낮습니다. 또한 YOLO는 자연 이미지뿐만 아니라 다른 도메인, 예를 들어 미술 작품 등에서도 우수한 성능을 보입니다.",
    "visualizations": [
      {
        "viz_type": "diagram",
        "tool": "graphviz",
        "viz_label": "YOLO vs State-of-the-art Detection",
        "viz_prompt": "digraph G { rankdir=LR; YOLO -> [label=\"More Localization Errors\"]; YOLO -> [label=\"Less False Positives\"]; \"State-of-the-art Detection\" -> [label=\"Less Localization Errors\"]; \"State-of-the-art Detection\" -> [label=\"More False Positives\"]; }"
      },
      {
        "viz_type": "diagram",
        "tool": "graphviz",
        "viz_label": "YOLO's Generalization Ability",
        "viz_prompt": "digraph G { rankdir=LR; \"Natural Images\" -> YOLO; YOLO -> \"Other Domains (e.g. Artwork)\"; }"
      }
    ]
  },
  {
    "scene_id": 6,
    "title": "YOLO의 응용 분야",
    "narration": "YOLO와 같은 빠르고 정확한 객체 탐지 알고리즘은 자율주행 자동차, 보조 장치, 범용 로봇 시스템 등 다양한 응용 분야에 활용될 수 있습니다.",
    "visualizations": [
      {
        "viz_type": "diagram",
        "tool": "graphviz",
        "viz_label": "YOLO 응용 분야",
        "viz_prompt": "digraph G { rankdir=LR; YOLO -> [\"Autonomous Vehicles\", \"Assistive Devices\", \"General Robotic Systems\"]; }"
      }
    ]
  },
  {
    "scene_id": 7,
    "title": "YOLO의 주요 특징",
    "narration": "YOLO는 단일 신경망 구조로 이루어져 있어 end-to-end로 최적화할 수 있습니다. 이를 통해 기존 방식보다 훨씬 빠른 처리 속도를 달성할 수 있습니다.",
    "visualizations": [
      {
        "viz_type": "diagram",
        "tool": "graphviz",
        "viz_label": "YOLO Architecture",
        "viz_prompt": "digraph G { rankdir=LR; Input -> Model -> Output; }"
      },
      {
        "viz_type": "diagram",
        "tool": "graphviz",
        "viz_label": "YOLO vs Other Detectors",
        "viz_prompt": "digraph G { rankdir=LR; YOLO -> FastYOLO[label=\"Faster\n(155 FPS)\"] YOLO -> OtherDetectors[label=\"Slower\n(45 FPS)\"] }"
      }
    ]
  },
  {
    "scene_id": 8,
    "title": "YOLO의 정확도",
    "narration": "YOLO는 기존 최첨단 탐지 시스템에 비해 경계 상자 정확도가 다소 낮지만, 배경에 대한 잘못된 탐지 확률이 낮아 전체적인 성능이 뛰어납니다.",
    "visualizations": [
      {
        "viz_type": "diagram",
        "tool": "graphviz",
        "viz_label": "Localization vs Background",
        "viz_prompt": "digraph G { rankdir=LR; StateMethods -> HigherLocErr; YOLO -> LowerFalsePos; }"
      },
      {
        "viz_type": "diagram",
        "tool": "graphviz",
        "viz_label": "Overall Performance",
        "viz_prompt": "digraph G { rankdir=LR; HigherLocErr -> OverallPerf; LowerFalsePos -> OverallPerf; }"
      }
    ]
  },
  {
    "scene_id": 9,
    "title": "YOLO의 일반화 능력",
    "narration": "YOLO는 매우 일반적인 객체 표현을 학습하여, 자연 이미지뿐만 아니라 다른 도메인, 예를 들어 미술 작품에서도 기존 탐지 방법들을 능가하는 성능을 보입니다.",
    "visualizations": [
      {
        "viz_type": "diagram",
        "tool": "graphviz",
        "viz_label": "YOLO's Generalization Ability",
        "viz_prompt": "digraph G { rankdir=LR; NaturalImages -> YOLO -> HighPerformance; NaturalImages -> OtherMethods -> LowPerformance; OtherDomains -> YOLO -> HighPerformance; OtherDomains -> OtherMethods -> LowPerformance; }"
      }
    ]
  },
  {
    "scene_id": 10,
    "title": "연구 결과 요약",
    "narration": "이 연구에서는 기존 객체 탐지 방식의 한계를 극복하기 위해 YOLO라는 새로운 접근법을 제안했습니다. YOLO는 매우 빠르고 일반화 능력이 뛰어나며, 기존 최첨단 탐지 시스템을 능가하는 성능을 보입니다.",
    "visualizations": [
      {
        "viz_type": "diagram",
        "tool": "graphviz",
        "viz_label": "YOLO Architecture",
        "viz_prompt": "digraph G { rankdir=LR; Input -> Backbone -> HeadNet -> Boxes_And_Probs; }"
      },
      {
        "viz_type": "diagram",
        "tool": "graphviz",
        "viz_label": "YOLO vs. Other Detectors",
        "viz_prompt": "digraph G { rankdir=LR; OtherDetectors -> SlowerSpeed; YOLO -> FasterSpeed; OtherDetectors -> LessGeneralization; YOLO -> BetterGeneralization; }"
      }
    ]
  }
]