[
  {
    "scene_id": 1,
    "title": "연구 동기와 문제 정의",
    "narration": "이 연구는 기존 객체 탐지 모델의 한계를 지적하며 시작합니다. 현재 대부분의 객체 탐지 시스템들은 분류기를 재활용하여 탐지 작업을 수행하고 있지만, 이는 복잡한 파이프라인으로 인해 속도가 느리고 최적화가 어려운 문제가 있습니다.",
    "viz_type": "diagram",
    "tool": "graphviz",
    "layout": "dot",
    "diagram": "digraph {\n  rankdir=LR;\n\n  subgraph cluster_current_system {\n    label=\"Current Object Detection System\";\n    node [shape=record];\n\n    classifier [label=\"Classifier\"];\n    sliding_window [label=\"Sliding Window\"];\n    test_image [label=\"Test Image\"];\n\n    test_image -> sliding_window -> classifier;\n  }\n\n  subgraph cluster_problem {\n    label=\"Problems\";\n    node [shape=rect];\n\n    slow_speed [label=\"Slow Speed\"];\n    hard_optimize [label=\"Hard to Optimize\"];\n    complex_pipeline [label=\"Complex Pipeline\"];\n\n    classifier -> slow_speed [style=dotted];\n    classifier -> hard_optimize [style=dotted];\n    sliding_window -> complex_pipeline [style=dotted];\n  }\n}",
    "visualizations": [
      {
        "viz_type": "diagram",
        "tool": "graphviz",
        "layout": "dot",
        "viz_label": "auto_primary",
        "diagram": "digraph {\n  rankdir=LR;\n\n  subgraph cluster_current_system {\n    label=\"Current Object Detection System\";\n    node [shape=record];\n\n    classifier [label=\"Classifier\"];\n    sliding_window [label=\"Sliding Window\"];\n    test_image [label=\"Test Image\"];\n\n    test_image -> sliding_window -> classifier;\n  }\n\n  subgraph cluster_problem {\n    label=\"Problems\";\n    node [shape=rect];\n\n    slow_speed [label=\"Slow Speed\"];\n    hard_optimize [label=\"Hard to Optimize\"];\n    complex_pipeline [label=\"Complex Pipeline\"];\n\n    classifier -> slow_speed [style=dotted];\n    classifier -> hard_optimize [style=dotted];\n    sliding_window -> complex_pipeline [style=dotted];\n  }\n}"
      }
    ]
  },
  {
    "scene_id": 2,
    "title": "제안된 방법론",
    "narration": "이러한 한계를 극복하기 위해, 저자들은 객체 탐지 문제를 단일 회귀 문제로 재정의합니다. 즉, 이미지 픽셀을 입력으로 받아 직접 바운딩 박스 좌표와 클래스 확률을 예측하는 통합 아키텍처를 제안합니다.",
    "viz_type": "diagram",
    "tool": "graphviz",
    "layout": "dot",
    "diagram": "digraph {\n  rankdir=LR;\n\n  subgraph cluster_input {\n    label=\"Input\";\n    style=dashed;\n    pixels [label=\"Image Pixels\"];\n  }\n\n  subgraph cluster_model {\n    label=\"Proposed Model\";\n    style=solid;\n    model [label=\"Integrated\nArchitecture\"];\n  }\n\n  subgraph cluster_output {\n    label=\"Output\";\n    style=dashed;\n    bbox [label=\"Bounding Box\nCoordinates\"];\n    prob [label=\"Class\nProbabilities\"];\n  }\n\n  pixels -> model;\n  model -> bbox;\n  model -> prob;\n}",
    "visualizations": [
      {
        "viz_type": "diagram",
        "tool": "graphviz",
        "layout": "dot",
        "viz_label": "auto_primary",
        "diagram": "digraph {\n  rankdir=LR;\n\n  subgraph cluster_input {\n    label=\"Input\";\n    style=dashed;\n    pixels [label=\"Image Pixels\"];\n  }\n\n  subgraph cluster_model {\n    label=\"Proposed Model\";\n    style=solid;\n    model [label=\"Integrated\nArchitecture\"];\n  }\n\n  subgraph cluster_output {\n    label=\"Output\";\n    style=dashed;\n    bbox [label=\"Bounding Box\nCoordinates\"];\n    prob [label=\"Class\nProbabilities\"];\n  }\n\n  pixels -> model;\n  model -> bbox;\n  model -> prob;\n}"
      }
    ]
  },
  {
    "scene_id": 3,
    "title": "YOLO 모델 구조",
    "narration": "저자들이 제안한 YOLO(You Only Look Once) 모델은 이미지 전체를 한 번에 입력받아 객체의 경계 박스와 클래스 확률을 직접 예측합니다. 이를 통해 기존 시스템에 비해 훨씬 빠른 속도로 작동할 수 있습니다.",
    "viz_type": "diagram",
    "tool": "digraph YOLO_model {\\n  rankdir=TB;\\n  \\n  subgraph cluster_input {\\n    label=\\\"Input Image\\\";\\n    image [shape=box];\\n  }\\n\\n  subgraph cluster_yolo {\\n    label=\\\"YOLO Model\\\";\\n    \\n    conv [label=\\\"Convolutional\\nLayers\\\"];\\n    bbox [label=\\\"Bounding Box\\nPrediction\\\"];\\n    cls [label=\\\"Class\\nProbability\\\"];\\n\\n    image -> conv -> bbox;\\n    image -> conv -> cls;\\n  }\\n\\n  subgraph cluster_output {\\n    label=\\\"Output\\\";\\n    \\n    bbbox [label=\\\"Bounding Boxes\\\"];\\n    cprob [label=\\\"Class Probabilities\\\"];\\n\\n    bbox -> bbbox;\\n    cls -> cprob;\\n  }\\n}",
    "visualizations": [
      {
        "viz_type": "diagram",
        "tool": "graphviz",
        "viz_label": "auto_fallback",
        "viz_prompt": "digraph G { A -> B; }",
        "layout": "dot"
      }
    ]
  },
  {
    "scene_id": 4,
    "title": "YOLO의 장점",
    "narration": "YOLO의 통합 아키텍처는 매우 빠르며, 실시간 물체 탐지가 가능합니다. 또한 YOLO는 다른 탐지 방법들에 비해 배경에서 오검출될 가능성은 낮지만, 위치 정확도 측면에서는 다소 떨어지는 것으로 나타났습니다.",
    "viz_type": "diagram",
    "tool": "digraph G {\\n  rankdir=LR;\\n  node [shape=rectangle];\\n\\n  \\\"Real-time\\nSpeed\\\" [color=green];\\n  \\\"High\\nAccuracy\\\" [color=orange];\\n  \\\"Low\\nFalse Positives\\\" [color=green];\\n  \\\"Localization\\nAccuracy\\\" [color=orange];\\n\\n  \\\"Real-time\\nSpeed\\\" -> \\\"YOLO\\\";\\n  \\\"High\\nAccuracy\\\" -> \\\"YOLO\\\" [style=dashed];\\n  \\\"Low\\nFalse Positives\\\" -> \\\"YOLO\\\";\\n  \\\"Localization\\nAccuracy\\\" -> \\\"YOLO\\\" [style=dashed];\\n}",
    "visualizations": [
      {
        "viz_type": "diagram",
        "tool": "graphviz",
        "viz_label": "auto_fallback",
        "viz_prompt": "digraph G { A -> B; }",
        "layout": "dot"
      }
    ]
  },
  {
    "scene_id": 5,
    "title": "YOLO의 일반화 성능",
    "narration": "YOLO는 자연 이미지뿐만 아니라 예술 작품과 같은 다른 도메인에서도 다른 탐지 방법들을 능가하는 성능을 보여줍니다. 이는 YOLO가 매우 일반화된 객체 표현을 학습했음을 의미합니다.",
    "viz_type": "diagram",
    "tool": "graph {\\n  rankdir=LR;\\n  node [shape=box];\\n  \\\"Natural Images\\\" -- \\\"YOLO\\\" [label=\\\"Outperforms\\\"]\\n  \\\"Artwork\\\" -- \\\"YOLO\\\" [label=\\\"Outperforms\\\"]\\n  \\\"YOLO\\\" -- \\\"Generalized Object Representation\\\"\\n}",
    "visualizations": [
      {
        "viz_type": "diagram",
        "tool": "graphviz",
        "viz_label": "auto_fallback",
        "viz_prompt": "digraph G { A -> B; }",
        "layout": "dot"
      }
    ]
  },
  {
    "scene_id": 6,
    "title": "인간의 시각 시스템에 대한 영감",
    "narration": "이 연구는 인간의 빠르고 정확한 시각 시스템에서 영감을 얻었습니다. 저자들은 이러한 능력을 모방하여 컴퓨터 비전 시스템의 속도와 정확성을 향상시키고자 합니다.",
    "viz_type": "diagram",
    "tool": "graph {\\n  graph [splines=curved, overlap=false, sep=2]\\n  node [shape=circle, style=filled, fillcolor=lightgray]\\n  edge [penwidth=2]\\n\\n  \\\"Fast, accurate human vision\\\" -- \\\"Driving with little conscious thought\\\"\\n  \\\"Fast, accurate human vision\\\" -- \\\"Complex task performance\\\"\\n  \\\"Fast, accurate human vision\\\" -- \\\"Object detection\\\"\\n  \\\"Fast, accurate human vision\\\" -- \\\"Scene understanding\\\"\\n\\n  \\\"Driving with little conscious thought\\\" -- \\\"Robotic systems\\\"\\n  \\\"Complex task performance\\\" -- \\\"Assistive devices\\\"\\n  \\\"Object detection\\\" -- \\\"Computer vision systems\\\"\\n  \\\"Scene understanding\\\" -- \\\"Computer vision systems\\\"\\n}",
    "visualizations": [
      {
        "viz_type": "diagram",
        "tool": "graphviz",
        "viz_label": "auto_fallback",
        "viz_prompt": "digraph G { A -> B; }",
        "layout": "dot"
      }
    ]
  },
  {
    "scene_id": 7,
    "title": "기존 방법의 한계",
    "narration": "기존의 객체 탐지 시스템들은 분류기를 재활용하여 탐지 작업을 수행합니다. 이러한 접근법은 복잡한 파이프라인으로 인해 속도가 느리고 최적화가 어려운 문제가 있습니다.",
    "viz_type": "diagram",
    "tool": "graphviz",
    "layout": "dot",
    "diagram": "digraph {\n  rankdir=LR;\n\n  subgraph cluster_input {\n    style=dashed;\n    label=\"Input Image\";\n    image [shape=box];\n  }\n\n  subgraph cluster_pipeline {\n    style=dashed;\n    label=\"Legacy Object Detection Pipeline\";\n    proposals [shape=box, label=\"Region Proposal\"];\n    classifier [shape=box, label=\"Classifier\"];\n    postprocessing [shape=box, label=\"Post-processing\"];\n    proposals -> classifier -> postprocessing;\n  }\n\n  subgraph cluster_issues {\n    style=dashed;\n    label=\"Issues\";\n    speed [shape=box, label=\"Slow Speed\"];\n    optimization [shape=box, label=\"Hard to Optimize\"];\n    speed -> optimization;\n  }\n\n  image -> proposals [label=\"Slow\"];\n  proposals -> speed;\n  postprocessing -> optimization;\n}",
    "visualizations": [
      {
        "viz_type": "diagram",
        "tool": "graphviz",
        "layout": "dot",
        "viz_label": "auto_primary",
        "diagram": "digraph {\n  rankdir=LR;\n\n  subgraph cluster_input {\n    style=dashed;\n    label=\"Input Image\";\n    image [shape=box];\n  }\n\n  subgraph cluster_pipeline {\n    style=dashed;\n    label=\"Legacy Object Detection Pipeline\";\n    proposals [shape=box, label=\"Region Proposal\"];\n    classifier [shape=box, label=\"Classifier\"];\n    postprocessing [shape=box, label=\"Post-processing\"];\n    proposals -> classifier -> postprocessing;\n  }\n\n  subgraph cluster_issues {\n    style=dashed;\n    label=\"Issues\";\n    speed [shape=box, label=\"Slow Speed\"];\n    optimization [shape=box, label=\"Hard to Optimize\"];\n    speed -> optimization;\n  }\n\n  image -> proposals [label=\"Slow\"];\n  proposals -> speed;\n  postprocessing -> optimization;\n}"
      }
    ]
  },
  {
    "scene_id": 8,
    "title": "YOLO의 특징",
    "narration": "YOLO는 객체 탐지 문제를 단일 회귀 문제로 재정의하여 이미지 전체를 한 번에 입력받아 바운딩 박스와 클래스 확률을 직접 예측합니다. 이를 통해 기존 시스템에 비해 훨씬 빠른 속도로 작동할 수 있습니다.",
    "viz_type": "diagram",
    "tool": "graphviz",
    "layout": "dot",
    "diagram": "digraph {\n  rankdir=LR;\n\n  subgraph cluster_input {\n    label=\"Input Image\";\n    image [shape=box];\n  }\n\n  subgraph cluster_yolo {\n    label=\"YOLO\";\n    bounding_boxes [shape=box];\n    class_probs [shape=box];\n  }\n\n  image -> bounding_boxes;\n  image -> class_probs;\n}",
    "visualizations": [
      {
        "viz_type": "diagram",
        "tool": "graphviz",
        "layout": "dot",
        "viz_label": "auto_primary",
        "diagram": "digraph {\n  rankdir=LR;\n\n  subgraph cluster_input {\n    label=\"Input Image\";\n    image [shape=box];\n  }\n\n  subgraph cluster_yolo {\n    label=\"YOLO\";\n    bounding_boxes [shape=box];\n    class_probs [shape=box];\n  }\n\n  image -> bounding_boxes;\n  image -> class_probs;\n}"
      }
    ]
  },
  {
    "scene_id": 9,
    "title": "YOLO의 성능 평가",
    "narration": "YOLO의 실험 결과, 기존 최신 탐지 시스템들에 비해 위치 정확도는 다소 낮지만 배경에서의 오검출 가능성이 낮은 것으로 나타났습니다. 또한 YOLO의 실시간 성능은 매우 뛰어나 초당 45프레임의 처리 속도를 보였습니다.",
    "viz_type": "diagram",
    "tool": "graph {\\n    node [shape=plaintext,fontname=Arial]\\n    edge [fontname=Arial]\\n    \\n    subgraph cluster_detection {\\n        label=\\\"Detection Performance\\\";\\n        style=dashed;\\n        \\n        accuracy [label=\\\"Localization Accuracy\\\"];\\n        falsepos [label=\\\"False Positives\\\"];\\n        \\n        accuracy -- falsepos [label=\\\"YOLO\\nCompared to\\nState-of-the-art\\\"];\\n    }\\n    \\n    subgraph cluster_realtime {\\n        label=\\\"Real-time Performance\\\";\\n        style=dashed;\\n        \\n        fps [label=\\\"45 FPS\\\"];\\n    }\\n}",
    "visualizations": [
      {
        "viz_type": "diagram",
        "tool": "graphviz",
        "viz_label": "auto_fallback",
        "viz_prompt": "digraph G { A -> B; }",
        "layout": "dot"
      }
    ]
  },
  {
    "scene_id": 10,
    "title": "결론 및 향후 과제",
    "narration": "이 연구는 객체 탐지 문제를 단일 회귀 문제로 접근하여 통합 아키텍처인 YOLO를 제안했습니다. YOLO는 빠른 속도와 우수한 일반화 성능을 보였지만, 위치 정확도 측면에서는 개선의 여지가 있습니다. 향후 연구에서는 이러한 한계를 보완할 수 있는 방향으로 발전시켜 나갈 계획입니다.",
    "viz_type": "diagram",
    "tool": "graph {\\n  rankdir=LR;\\n  node [shape=rectangle];\\n  \\\"현재 YOLO 한계\\\" -- \\\"향후 연구 방향\\\";\\n  \\\"현재 YOLO 한계\\\" [label=\\\"\\\\n\\\\n\\\\n- 위치 정확도 개선 필요\\\"];\\n  \\\"향후 연구 방향\\\" [label=\\\"\\\\n\\\\n\\\\n- 위치 정확도 향상 방안 모색\\\"];\\n}",
    "visualizations": [
      {
        "viz_type": "diagram",
        "tool": "graphviz",
        "viz_label": "auto_fallback",
        "viz_prompt": "digraph G { A -> B; }",
        "layout": "dot"
      }
    ]
  }
]